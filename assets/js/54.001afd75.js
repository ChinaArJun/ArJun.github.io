(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{472:function(t,e,n){t.exports=n.p+"assets/img/clip_image002-1543152506873.8e343d2f.jpg"},764:function(t,e,n){"use strict";n.r(e);var r=n(44),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"发送用户实名认证信息服务（认证相关）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#发送用户实名认证信息服务（认证相关）"}},[t._v("#")]),t._v(" 发送用户实名认证信息服务（认证相关）")]),t._v(" "),r("h2",{attrs:{id:"流程与接口"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#流程与接口"}},[t._v("#")]),t._v(" 流程与接口")]),t._v(" "),r("p",[r("img",{attrs:{src:n(472),alt:"img"}})]),t._v(" "),r("div",{staticClass:"language-json extra-class"},[r("pre",{pre:!0,attrs:{class:"language-json"}},[r("code",[t._v("#Request"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\nmethod"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" POST\nurl"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("api/v"),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0")]),t._v("/user/auth\n#data"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    real_name"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"熊猫"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n    id_card"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"21011223344556677"')]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#Response\n#返回成功：\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token property"}},[t._v('"errno"')]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token property"}},[t._v('"errmsg"')]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"成功"')]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n#返回失败：\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token property"}},[t._v('"errno"')]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"400x"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//状态码")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token property"}},[t._v('"errmsg"')]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"状态错误信息"')]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),r("h2",{attrs:{id:"创建命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建命令"}},[t._v("#")]),t._v(" 创建命令")]),t._v(" "),r("div",{staticClass:"language-shell extra-class"},[r("pre",{pre:!0,attrs:{class:"language-shell"}},[r("code",[t._v("$ micro new –type "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"srv"')]),t._v(" sss/PostUserAuth\n")])])]),r("p",[t._v("proto")]),t._v(" "),r("div",{staticClass:"language-proto extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('syntax = "proto3";\n\npackage go.micro.srv.PostUserAuth;\n\nservice Example {\n\trpc PostUserAuth(Request) returns (Response) {}\n\n}\n\n\n\nmessage Request {\n\tstring real_name = 1;\n\tstring id_card = 2;\n\tstring sessionid = 3;\n}\n\nmessage Response {\n\tstring errno = 1;\n\tstring errmsg = 2;\n}\n\n')])])]),r("p",[t._v("web hander")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('func PostUserAuth(w http.ResponseWriter, r *http.Request , _ httprouter.Params ) {\n\tfmt.Println("更新实名认证检测  URL: /api/v1.0/user/auth PostUserAuth ")\n\t// decode the incoming request as json\n\tvar request map[string]interface{}\n\tif err := json.NewDecoder(r.Body).Decode(&request); err != nil {\n\t\thttp.Error(w, err.Error(), 500)\n\t\treturn\n\t}\n\n\tfmt.Println(request["real_name"])\n\tfmt.Println(request["id_card"])\n\n\n\t//获取session\n\t//从cookie获取sessionid\n\tcookie , err:=r.Cookie("userlogin")\n\tif err!=nil{\n\t\tresponse := map[string]interface{}{\n\t\t\t"errno": utils.RECODE_SESSIONERR,\n\t\t\t"errmsg": utils.RecodeText(utils.RECODE_SESSIONERR),\n\t\t}\n\t\tw.Header().Set("Content-Type","application/json")\n\t\t// encode and write the response as json\n\t\tif err := json.NewEncoder(w).Encode(response); err != nil {\n\t\t\thttp.Error(w, err.Error(), 500)\n\t\t\treturn\n\t\t}\n\n\t\treturn\n\t}\n\n\tclient :=grpc.NewService()\n\tclient.Init()\n\n\t// call the backend service\n\texampleClient := POSTUSERAUTH.NewExampleService("go.micro.srv.PostUserAuth", client.Client())\n\trsp, err := exampleClient.PostUserAuth(context.TODO(), &POSTUSERAUTH.Request{\n\t\tSessionid:cookie.Value,\n\t\tRealName:request["real_name"].(string),\n\t\tIdCard: request["id_card"].(string),\n\t})\n\tif err != nil {\n\t\thttp.Error(w, err.Error(), 500)\n\t\treturn\n\t}\n\n\t//将sessionid设置给cookie\n\n\tcookie , err = r.Cookie("userlogin")\n\tif err!=nil ||""==cookie.Value{\n\t\tcookie := http.Cookie{\n\t\t\tName:"userlogin",\n\t\t\tValue:cookie.Value,\n\t\t\tPath:"/",\n\t\t\tMaxAge:600,\n\t\t}\n\n\t\thttp.SetCookie(w,&cookie)\n\t}\n\n\n\t// we want to augment the response\n\tresponse := map[string]interface{}{\n\t\t"errno": rsp.Errno,\n\t\t"errmsg": rsp.Errmsg,\n\t}\n\tw.Header().Set("Content-Type","application/json")\n\t// encode and write the response as json\n\tif err := json.NewEncoder(w).Encode(response); err != nil {\n\t\thttp.Error(w, err.Error(), 500)\n\t\treturn\n\t}\n}\n\n\n')])])]),r("p",[t._v("srv hander")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('func (e *Example) PostUserAuth(ctx context.Context, req *example.Request, rsp *example.Response) error {\n\n\tfmt.Println("更新实名认证检测  URL: /api/v1.0/user/auth PostUserAuth ")\n\n\t/*初始化返回*/\n\trsp.Errno = utils.RECODE_OK\n\trsp.Errmsg = utils.RecodeText(rsp.Errno)\n\t/*通过sessionid拼接key*/\n\n\tsessionuserid := req.Sessionid+"user_id"\n\n\t/*链接redis*/\n\tbm ,err:=utils.OpenRedis(utils.G_server_name,utils.G_redis_addr,utils.G_redis_port,utils.G_redis_dbnum)\n\tif err!=nil{\n\t\tfmt.Println("redis链接失败",err)\n\t\trsp.Errno = utils.RECODE_DBERR\n\t\trsp.Errmsg = utils.RecodeText(rsp.Errno)\n\t\treturn nil\n\t}\n\t/*通过redis 以sessionid拼接的key来查询userid*/\n\tvalue :=bm.Get(sessionuserid)\n\n\tvalueid :=int(value.([]uint8)[0])\n\n\n\t/*通过userid 更新user数据*/\n\to:=orm.NewOrm()\n\t//创建数据对象\n\tuser:=models.User{Id:valueid,Real_name:req.RealName,Id_card:req.IdCard}\n\n\t_,err=o.Update(&user,"real_name","id_card")\n\tif err!=nil{\n\t\tfmt.Println("数据更新失败",err)\n\t\trsp.Errno = utils.RECODE_DBERR\n\t\trsp.Errmsg = utils.RecodeText(rsp.Errno)\n\t\treturn nil\n\t}\n\n\n\t/*更新登录时间*/\n\n\t//先删除\n\t/*拼接key*/\n\tsname:= req.Sessionid +"name"\n\tsuserid:= req.Sessionid +"user_id"\n\tsmobile:= req.Sessionid +"mobile"\n\n\t/*删除登录数据*/\n\tbm.Delete(sname)\n\tbm.Delete(suserid)\n\tbm.Delete(smobile)\n\t//后添加\n\t/*将登录信息存入 redis*/\n\tbm.Put(sname,string(user.Name),time.Second*600)\n\tbm.Put(suserid,string(user.Id),time.Second*600)\n\tbm.Put(smobile,string(user.Mobile),time.Second*600)\n\n\n\n\treturn nil\n}\n')])])])])}),[],!1,null,null,null);e.default=s.exports}}]);